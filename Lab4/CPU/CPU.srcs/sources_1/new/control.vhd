library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.NUMERIC_STD.ALL;

entity control is
    Port(
        a_high : in std_logic;
        mul_done: in std_logic;
        mul_reset,mulhien,mulloen : out std_logic;
        Op : in std_logic_vector(5 downto 0);
        inst5_0 : in std_logic_vector(5 downto 0);
        --funct : in std_logic_vector(
        PCWriteCond : out std_logic;
        PCWrite : out std_logic;
        reset : in std_logic;
        clk : in std_logic;
        IorD : out std_logic;
        z_ex : out std_logic;
        MemDataReg: out std_logic;
        se_sel : out std_logic_vector(1 downto 0);
        MemRead : out std_logic;
        MemWrite : out std_logic;
        MemtoReg : out std_logic_vector(2 downto 0);
        IRWrite : out std_logic;
        RegDst : out std_logic_vector(1 downto 0);
        RegWrite: out std_logic;
        RegA, RegB : out std_logic;
        ALUSrcA : out std_logic;
        ALUSrcB : out std_logic_vector(1 downto 0);
        ALUOp : out std_logic_vector(5 downto 0);
        ALUout : out std_logic;
        PCSource : out std_logic_vector(1 downto 0);
        st : out std_logic_vector(4 downto 0));
end control;
--rtype op00000     
architecture Behavioral of control is
    type state is (BLTZAL,IFETCH, DECODE,EXECUTE,RCOMP,JCOMP,BRANCH,MemAddrCalc,MemAccess,MemComp,LCOMP,CLOCOMP,MULWAIT,MULWB);
    signal pr_state, nx_state : state;
begin
    process(reset,clk)
    begin
        if(reset='1') then pr_state<=IFETCH;
        elsif(clk'event and clk = '1') then pr_state <= nx_state;
        end if;
    end process;
    
    process(pr_state,Op,inst5_0,mul_done,a_high)
    begin
        case pr_state is
            when IFETCH =>
                mul_reset<= '0';
                mulhien<= '0';
                mulloen<= '0';
                MemDataReg <= '0';
                se_sel <= "00";
                z_ex <= '0';
                --incPC
                --IorD will eventually need more
                PCWriteCond <= '0';
                PCWrite <= '1';
                IorD <= '0';
                MemRead <= '1';
                MemWrite <= '0';
                MemtoReg <= "000";
                IRWrite <= '1';
                RegDst <= "00";
                RegWrite <= '0';
                ALUSrcA <= '0';
                ALUSrcB <= "01";
                ALUOp <= "111111";
                PCSource <= "00";
                RegA <= '0';
                RegB <= '0';
                ALUout <=  '0';
                nx_state<= DECODE;
                st<= "00000";
            when DECODE =>
                st<= "00001";
                --R-type
                z_ex <= '0';
                if(Op = "000000") then
                    MemDataReg <= '0';
                    se_sel <= "00";
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '0';
                    MemWrite <= '0';
                    IRWrite <= '0';
                    RegWrite <= '0';
                    ALUSrcA <= '1';
                    ALUSrcB <= "00";
                    ALUOp <= "000000";
                    PCSource <= "00";
                    RegA <= '1';
                    RegB <= '1';
                    ALUout <=  '0';
                    if (inst5_0 = "001000") then
                        nx_state <= JCOMP;
                    elsif(inst5_0 = "011001") then
                        nx_state <= MULWAIT;
                    elsif(inst5_0 = "010010") then
                        nx_state <= IFETCH;
                    elsif(inst5_0 = "010000") then
                        nx_state <= IFETCH;
                    else
                        nx_state<= EXECUTE;
                    end if;
                    
                    if(inst5_0 <= "011001") then
                        mul_reset<= '1';
                    else
                        mul_reset<= '0';
                    end if;
                    
                    if(inst5_0 = "010010") then
                        RegDst<="01";
                        RegWrite <= '1';
                        MemtoReg <= "101";
                    elsif(inst5_0 = "010000") then
                        RegWrite <= '1';
                        MemtoReg <= "100";
                        RegDst<="01";
                    else
                        RegWrite <= '0';
                        RegDst<="01";
                        MemtoReg <= "000";
                    end if;
                    --handle mut
                mulhien<= '0';
                mulloen<= '0';
                elsif (Op = "001000") then
                    mul_reset<= '0';
                    mulhien<= '0';
                    mulloen<= '0';
                    MemDataReg <= '0';
                    se_sel <= "00";
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '0';
                    MemWrite <= '0';
                    MemtoReg <= "000";
                    IRWrite <= '0';
                    RegDst <= "01";
                    RegWrite <= '0';
                    ALUSrcA <= '1';
                    ALUSrcB <= "10";
                    ALUOp <= "000000";
                    PCSource <= "00";
                    RegA <= '1';
                    RegB <= '1';
                    ALUout <=  '0';
                    nx_state<= EXECUTE;
                elsif (Op = "001000") then --ADDI
                    mul_reset<= '0';
                    mulhien<= '0';
                    mulloen<= '0';
                    MemDataReg <= '0';
                    se_sel <= "00";
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '0';
                    MemWrite <= '0';
                    MemtoReg <= "000";
                    IRWrite <= '0';
                    RegDst <= "01";
                    RegWrite <= '0';
                    ALUSrcA <= '1';
                    ALUSrcB <= "00";
                    ALUOp <= "000000";
                    PCSource <= "00";
                    RegA <= '1';
                    RegB <= '1';
                    ALUout <=  '0';
                    nx_state<= EXECUTE;
                elsif (Op ="001010") then -- SLTI
                    mul_reset<= '0';
                    mulhien<= '0';
                    mulloen<= '0';
                    MemDataReg <= '0';
                    se_sel <= "00";
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '0';
                    MemWrite <= '0';
                    MemtoReg <= "000";
                    IRWrite <= '0';
                    RegDst <= "00";
                    RegWrite <= '0';
                    ALUSrcA <= '1';
                    ALUSrcB <= "10";
                    ALUOp <= "001010";
                    PCSource <= "00";
                    RegA <= '1';
                    RegB <= '0';
                    ALUout <=  '0';
                    nx_state<= EXECUTE;
                elsif (Op = "000010") then -- Jump Instruction
                    mul_reset<= '0';
                    mulhien<= '0';
                    mulloen<= '0';
                    MemDataReg <= '0';
                    se_sel <= "00";
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '0';
                    MemWrite <= '0';
                    MemtoReg <= "000";
                    IRWrite <= '0';
                    RegDst <= "00";
                    RegWrite <= '0';
                    ALUSrcA <= '1';
                    ALUSrcB <= "10";
                    ALUOp <= "000010";
                    PCSource <= "00";
                    RegA <= '0';
                    RegB <= '0';
                    ALUout <=  '0';
                    nx_state<= JCOMP;
                elsif (Op = "000101") then -- BNE
                    mul_reset<= '0';
                    mulhien<= '0';
                    mulloen<= '0';
                    MemDataReg <= '0';
                    se_sel <= "00";
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '0';
                    MemWrite <= '0';
                    MemtoReg <= "000";
                    IRWrite <= '0';
                    RegDst <= "00";
                    RegWrite <= '0';
                    ALUSrcA <= '0';
                    ALUSrcB <= "11";
                    ALUOp <= "001000";--just pick somtehing that does signed add
                    PCSource <= "00";
                    RegA <= '1';
                    RegB <= '1';
                    ALUout <=  '1';
                    nx_state<= BRANCH;
                elsif (Op = "100000") then --Load Byte--thisb
                    mul_reset<= '0';
                    mulhien<= '0';
                    mulloen<= '0';
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '0';
                    MemWrite <= '0';
                    MemtoReg <= "000";
                    IRWrite <= '0';
                    RegDst <= "00";
                    RegWrite <= '0';
                    ALUSrcA <= '0';
                    ALUSrcB <= "10";
                    ALUOp <= "001000";--just pick somtehing that does signed add
                    PCSource <= "00";
                    RegA <= '1';
                    RegB <= '0';
                    ALUout <=  '1';
                    nx_state<= MemAddrCalc;
                    MemDataReg <= '1';
                    se_sel <= "00";
                elsif (Op = "100001") then --Load Half-Word
                    mul_reset<= '0';
                    mulhien<= '0';
                    mulloen<= '0';
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '0';
                    MemWrite <= '0';
                    MemtoReg <= "000";
                    IRWrite <= '0';
                    RegDst <= "00";
                    RegWrite <= '0';
                    ALUSrcA <= '0';
                    ALUSrcB <= "10";
                    ALUOp <= "001000";--just pick somtehing that does signed add
                    PCSource <= "00";
                    RegA <= '1';
                    RegB <= '0';
                    ALUout <=  '1';
                    nx_state<= MemAddrCalc;
                    MemDataReg <= '1';
                    se_sel <= "01";
                elsif (Op = "100011") then --Load Word--h
                    mul_reset<= '0';
                    mulhien<= '0';
                    mulloen<= '0';
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '0';
                    MemWrite <= '0';
                    MemtoReg <= "000";
                    IRWrite <= '0';
                    RegDst <= "00";
                    RegWrite <= '0';
                    ALUSrcA <= '0';
                    ALUSrcB <= "10";
                    ALUOp <= "001000";--just pick somtehing that does signed add
                    PCSource <= "00";
                    RegA <= '1';
                    RegB <= '0';
                    ALUout <=  '1';
                    nx_state<= MemAddrCalc;
                    MemDataReg <= '1';
                    se_sel <= "10";
                elsif (Op = "001111") then -- Load Upper Imm    
                    mul_reset<= '0';
                    mulhien<= '0';
                    mulloen<= '0';
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '0';
                    MemWrite <= '0';
                    MemtoReg <= "011";
                    IRWrite <= '0';
                    RegDst <= "00";
                    RegWrite <= '0';
                    ALUSrcA <= '1';
                    ALUSrcB <= "10";
                    ALUOp <= "001111";
                    PCSource <= "00";
                    RegA <= '0';
                    RegB <= '0';
                    ALUout <=  '0';
                    nx_state<= LCOMP;--doing this since LUI seems pretty similar on first glance 
                    MemDataReg <= '0';
                    se_sel <= "10";
                elsif (Op = "101011") then --Store Word
                    mul_reset<= '0';
                    mulhien<= '0';
                    mulloen<= '0';
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '0';
                    MemWrite <= '0';
                    MemtoReg <= "000";
                    IRWrite <= '0';
                    RegDst <= "00";
                    RegWrite <= '0';
                    ALUSrcA <= '1';
                    ALUSrcB <= "10";
                    ALUOp <= "001000";--just pick somtehing that does signed add
                    PCSource <= "00";
                    RegA <= '1';
                    RegB <= '1';
                    ALUout <=  '1';
                    nx_state<= MemAddrCalc;
                    MemDataReg <= '1';
                    se_sel <= "01";
                elsif (Op = "011100") then --CLO
                    mul_reset<= '0';
                    mulhien<= '0';
                    mulloen<= '0';
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '0';
                    MemWrite <= '0';
                    MemtoReg <= "000";
                    IRWrite <= '0';
                    RegDst <= "00";
                    RegWrite <= '0';
                    ALUSrcA <= '0';
                    ALUSrcB <= "10";
                    ALUOp <= "001000";
                    PCSource <= "00";
                    RegA <= '1';
                    RegB <= '0';
                    ALUout <=  '0';
                    nx_state<= CLOCOMP;
                    MemDataReg <= '0';
                    se_sel <= "01";
                elsif(Op= "000001") then --BLTZAL
                    mul_reset<= '0';
                    mulhien<= '0';
                    mulloen<= '0';
                    MemDataReg <= '0';
                    se_sel <= "00";
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '0';
                    MemWrite <= '0';
                    MemtoReg <= "000";
                    IRWrite <= '0';
                    RegDst <= "00";
                    RegWrite <= '0';
                    ALUSrcA <= '0';
                    ALUSrcB <= "11";
                    ALUOp <= "001000";--just pick somtehing that does signed add
                    PCSource <= "00";
                    RegA <= '1';
                    RegB <= '1';
                    ALUout <=  '1';
                    nx_state<= BLTZAL;
                elsif (Op = "001101") then --ORI
                    mul_reset<= '0';
                    mulhien<= '0';
                    mulloen<= '0';
                    MemDataReg <= '0';
                    se_sel <= "00";
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '0';
                    MemWrite <= '0';
                    MemtoReg <= "000";
                    IRWrite <= '0';
                    RegDst <= "01";
                    RegWrite <= '0';
                    ALUSrcA <= '1';
                    ALUSrcB <= "00";
                    ALUOp <= "000000";
                    PCSource <= "00";
                    RegA <= '1';
                    RegB <= '1';
                    ALUout <=  '0';
                    nx_state<= EXECUTE;
                end if;
            when EXECUTE =>
                mul_reset<= '0';
                mulhien<= '0';
                mulloen<= '0';
                st<= "00010";
                if(Op = "000000") then
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '1';
                    MemWrite <= '0';
                    MemtoReg <= "000";
                    IRWrite <= '0';
                    RegDst <= "00";
                    RegWrite <= '0';
                    ALUSrcA <= '1';
                    ALUSrcB <= "00";
                    ALUOp <= "000000";
                    PCSource <= "00";
                    RegA <= '0';
                    RegB <= '0';
                    ALUout <=  '1';
                    z_ex <= '0';
                    nx_state<= RCOMP;
                elsif (Op = "001000") then
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '1';
                    MemWrite <= '0';
                    MemtoReg <= "000";
                    IRWrite <= '0';
                    RegDst <= "00";
                    RegWrite <= '0';
                    ALUSrcA <= '1';
                    ALUSrcB <= "10";
                    ALUOp <= "001000";
                    PCSource <= "10";
                    RegA <= '0';
                    RegB <= '0';
                    ALUout <=  '1';
                    z_ex <= '0';
                    nx_state<= RCOMP;
                elsif (Op = "001101") then
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '1';
                    MemWrite <= '0';
                    MemtoReg <= "000";
                    IRWrite <= '0';
                    RegDst <= "00";
                    RegWrite <= '0';
                    ALUSrcA <= '1';
                    ALUSrcB <= "10";
                    ALUOp <= "001101";
                    PCSource <= "00";
                    RegA <= '0';
                    RegB <= '0';
                    ALUout <=  '1';
                    z_ex <= '1';
                    nx_state<= RCOMP;
                elsif (Op = "001010") then --slti
                    PCWriteCond <= '0';
                    PCWrite <= '0';
                    IorD <= '0';
                    MemRead <= '1';
                    MemWrite <= '0';
                    MemtoReg <= "000";
                    IRWrite <= '0';
                    RegDst <= "00";
                    RegWrite <= '0';
                    ALUSrcA <= '1';
                    ALUSrcB <= "10";
                    ALUOp <= "001010";
                    PCSource <= "00";
                    RegA <= '0';
                    RegB <= '0';
                    ALUout <=  '1';
                    z_ex <= '0';
                    nx_state<= RCOMP;
                end if;
            when RCOMP =>
                mul_reset<= '0';
                mulhien<= '0';
                mulloen<= '0';
                st<= "00011";
                PCWriteCond <= '0';
                PCWrite <= '0';
                IorD <= '0';
                MemRead <= '0';
                MemWrite <= '0';
                MemtoReg <= "000";
                IRWrite <= '0';
                RegWrite <= '1';
                ALUSrcA <= '0';
                ALUSrcB <= "00";
                ALUOp <= "000000";
                PCSource <= "00";
                RegA <= '0';
                RegB <= '0';
                z_ex <= '0';
                ALUout <=  '0';
                nx_state<= IFETCH;
                if(Op = "000000") then
                    RegDst <= "01";
                else 
                    RegDst <= "00";
                end if;
            when JCOMP =>
                mul_reset<= '0';
                mulhien<= '0';
                mulloen<= '0';
                st<= "00100";
                PCWriteCond <= '0';
                PCWrite <= '1';
                IorD <= '0';
                MemRead <= '0';
                MemWrite <= '0';
                MemtoReg <= "000";
                IRWrite <= '0';
                RegWrite <= '0';
                ALUSrcA <= '0';
                ALUSrcB <= "00";
                ALUOp <= "000000";
                PCSource <= "10";
                RegDst <= "00";
                RegA <= '0';
                RegB <= '0';
                z_ex <= '0';
                ALUout <=  '0';
                if (Op = "000000") then
                    PCSource <="11";
                else
                    PCSource <= "10";
                end if;
                nx_state<= IFETCH;
            when BRANCH =>
                mul_reset<= '0';
                mulhien<= '0';
                mulloen<= '0';
                st<= "00101";
                PCWriteCond <= '1';
                RegDst <= "00";
                PCWrite <= '0';
                IorD <= '0';
                MemRead <= '0';
                MemWrite <= '0';
                MemtoReg <= "000";
                IRWrite <= '0';
                RegWrite <= '0';
                ALUSrcA <= '1';
                ALUSrcB <= "00";
                ALUOp <= "000101";
                PCSource <= "10";
                RegA <= '0';
                RegB <= '0';
                z_ex <= '0';
                ALUout <=  '0';
                PCSource <= "01";
                nx_state<= IFETCH;
            when MemAddrCalc=>
                mul_reset<= '0';
                mulhien<= '0';
                mulloen<= '0';
                st<= "00110";
                MemDataReg <= '0';
                if(Op = "1000000") then
                   se_sel <= "00";
                elsif (Op = "100001" or Op = "101011") then
                    se_sel <= "01";
                elsif (Op = "100011") then 
                    se_sel <= "10";
                end if;
                PCWriteCond <= '0';
                PCWrite <= '0';
                IorD <= '1';
                RegDst <= "00";
                MemRead <= '0';
                MemWrite <= '0';
                MemtoReg <= "000";
                IRWrite <= '0';
                RegWrite <= '0';
                ALUSrcA <= '1';
                ALUSrcB <= "10";
                ALUOp <= "001000";
                PCSource <= "10";
                RegA <= '0';
                RegB <= '0';
                z_ex <= '0';
                ALUout <=  '1';
                PCSource <= "01";
                nx_state<= MemAccess;
            when MemAccess =>
                mul_reset<= '0';
                mulhien<= '0';
                mulloen<= '0';
                if (Op = "101011") then
                    st<= "00111";
                        MemDataReg <= '0';
                        se_sel <= "01";
                        PCWriteCond <= '0';
                        PCWrite <= '0';
                        IorD <= '1';
                        MemRead <= '0';
                        MemWrite <= '1';
                        MemtoReg <= "000";
                        IRWrite <= '0';
                        RegWrite <= '0';
                        ALUSrcA <= '0';
                        ALUSrcB <= "10";
                        ALUOp <= "000101";
                        PCSource <= "10";
                        RegDst <= "00";
                        RegA <= '0';
                        RegB <= '0';
                        z_ex <= '0';
                        ALUout <=  '0';
                        PCSource <= "01";
                        nx_state<= IFETCH;
                else
                        st<= "00111";
                        MemDataReg <= '1';
                        if(Op = "1000000") then
                           se_sel <= "00";
                        elsif (Op = "100001") then
                            se_sel <= "01";
                        elsif (Op = "100011") then 
                            se_sel <= "10";
                        end if;
                        PCWriteCond <= '0';
                        PCWrite <= '0';
                        IorD <= '1';
                        MemRead <= '0';
                        MemWrite <= '0';
                        MemtoReg <= "001";
                        IRWrite <= '0';
                        RegWrite <= '0';
                        ALUSrcA <= '0';
                        ALUSrcB <= "10";
                        ALUOp <= "000101";
                        PCSource <= "10";
                        RegDst <= "00";
                        RegA <= '0';
                        RegB <= '0';
                        z_ex <= '0';
                        ALUout <=  '0';
                        PCSource <= "01";
                        nx_state<= MemComp;
                end if;
            when MemComp =>
                mul_reset<= '0';
                mulhien<= '0';
                mulloen<= '0';
                st<= "01000";
                MemDataReg <= '0';
                if(Op = "1000000") then
                   se_sel <= "00";
                elsif (Op = "100001") then
                    se_sel <= "01";
                elsif (Op = "100011") then 
                    se_sel <= "10";
                end if;
                PCWriteCond <= '0';
                PCWrite <= '0';
                IorD <= '1';
                MemRead <= '0';
                MemWrite <= '0';
                MemtoReg <= "001";
                IRWrite <= '0';
                RegWrite <= '1';
                ALUSrcA <= '0';
                ALUSrcB <= "10";
                ALUOp <= "000101";
                RegDst <= "00";
                PCSource <= "10";
                RegA <= '0';
                RegB <= '0';
                z_ex <= '0';
                ALUout <=  '0';
                PCSource <= "01";
                nx_state<= IFETCH;
        when LCOMP =>
                mul_reset<= '0';
                mulhien<= '0';
                mulloen<= '0';
                st<= "01001";
                PCWriteCond <= '0';
                PCWrite <= '0';
                IorD <= '0';
                MemRead <= '0';
                MemWrite <= '0';
                MemtoReg <= "011";
                IRWrite <= '0';
                RegWrite <= '1';
                ALUSrcA <= '0';
                ALUSrcB <= "00";
                ALUOp <= "000000";
                PCSource <= "00";
                RegA <= '0';
                RegB <= '0';
                z_ex <= '0';
                ALUout <=  '0';
                nx_state<= IFETCH;
                RegDst <= "00";
            when CLOCOMP =>
                mul_reset<= '0';
                mulhien<= '0';
                mulloen<= '0';
                st<= "01010";
                PCWriteCond <= '0';
                PCWrite <= '0';
                IorD <= '0';
                MemRead <= '0';
                MemWrite <= '0';
                MemtoReg <= "010";
                IRWrite <= '0';
                RegWrite <= '1';
                ALUSrcA <= '0';
                ALUSrcB <= "00";
                ALUOp <= "000000";
                PCSource <= "00";
                RegA <= '0';
                RegB <= '0';
                z_ex <= '0';
                ALUout <=  '0';
                nx_state<= IFETCH;
                RegDst <= "01";
            when MULWAIT=>
                mul_reset<= '0';
                mulhien<= '0';
                mulloen<= '0';
                st<= "01011";
                PCWriteCond <= '0';
                PCWrite <= '0';
                IorD <= '0';
                MemRead <= '0';
                MemWrite <= '0';
                MemtoReg <= "010";
                IRWrite <= '0';
                RegWrite <= '0';
                ALUSrcA <= '0';
                ALUSrcB <= "00";
                ALUOp <= "000000";
                PCSource <= "00";
                RegA <= '0';
                RegB <= '0';
                z_ex <= '0';
                ALUout <=  '0';
                if (mul_done = '1') then
                   nx_state<= MULWB;
                else
                  nx_state <= MULWAIT;
                end if;
                RegDst <= "00";
            when MULWB =>
                mul_reset<= '0';
                mulhien<= '1';
                mulloen<= '1';
                st<= "01100";
                PCWriteCond <= '0';
                PCWrite <= '0';
                IorD <= '0';
                MemRead <= '0';
                MemWrite <= '0';
                MemtoReg <= "010";
                IRWrite <= '0';
                RegWrite <= '0';
                ALUSrcA <= '0';
                ALUSrcB <= "00";
                ALUOp <= "000000";
                PCSource <= "00";
                RegA <= '0';
                RegB <= '0';
                z_ex <= '0';
                ALUout <=  '0';
                nx_state <= IFETCH;
                RegDst <= "00";
             when BLTZAL =>
             if(a_high = '1') then
                mul_reset<= '0';
                mulhien<= '0';
                mulloen<= '0';
                st<= "01101";
                PCWriteCond <= '1';
                RegDst <= "00";
                PCWrite <= '0';
                IorD <= '0';
                MemRead <= '0';
                MemWrite <= '0';
                MemtoReg <= "110";
                IRWrite <= '0';
                RegWrite <= '1';
                ALUSrcA <= '1';
                ALUSrcB <= "00";
                ALUOp <= "000101";
                RegA <= '0';
                RegB <= '0';
                z_ex <= '0';
                RegDst <= "10";
                ALUout <=  '0';
                PCSource <= "01";
                nx_state<= IFETCH;
           else
                mul_reset<= '0';
                mulhien<= '0';
                mulloen<= '0';
                st<= "01101";
                PCWriteCond <= '0';
                RegDst <= "00";
                PCWrite <= '0';
                IorD <= '0';
                MemRead <= '0';
                MemWrite <= '0';
                if(a_high = '1') then
                MemtoReg <= "110";
                else
                MemtoReg <= "010";
                end if;
                IRWrite <= '0';
                RegWrite <= '0';
                ALUSrcA <= '1';
                ALUSrcB <= "00";
                ALUOp <= "000101";
                PCSource <= "10";
                RegA <= '0';
                RegB <= '0';
                z_ex <= '0';
                ALUout <=  '0';
                PCSource <= "01";
                nx_state<= IFETCH;
           end if;
        end case;
    end process;

end Behavioral;
